#!perl

# check_cpu is a nagios plugin to monitor the CPU usage on Linux systems
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use 5.008;
use strict;
use warnings;
use Carp;

use version; our $VERSION = '1.0.2';

use English qw(-no_match_vars);
use File::Temp;
use File::Copy;
use Getopt::Long;
use Nagios::Plugin::Threshold;
use Nagios::Plugin;
use Pod::Usage qw(pod2usage);

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $blocked
  $cpu
  $critical
  $ctxt
  $diff
  $help
  $irq
  $new_procs
  $nice
  $plugin
  $result
  $running
  $silent
  $system
  $threshold
  $tmp
  $user
  $verbosity
  $warning
  %new
  %old
);

##############################################################################
# subroutines

##############################################################################
# Usage     : write_timer_to_file($file)
# Purpose   : writes the time and transmit data to the temporary file
# Returns   : n/a
# Arguments : $file : file to write the timer to
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub write_timer_to_file {

    my $file = shift;

    # copy the stats
    copy( '/proc/stat', $file )
      or $plugin->nagios_exit( UNKNOWN,
        "Cannot copy /proc/stat to $file: $OS_ERROR" );

    my $TMP;

    # add the time
    open $TMP, q{>>}, $file
      or $plugin->nagios_exit( UNKNOWN, "Cannot initialize timer: $OS_ERROR" );
    print {$TMP} 'time ' . time . "\n";
    close $TMP
      or $plugin->nagios_exit( UNKNOWN, "Cannot close timer: $OS_ERROR" );

    return;

}

##############################################################################
# Usage     : get_proc_owner()
# Purpose   : retrieve the user runnging the process
# Returns   : username
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub get_proc_owner {
    my $output;
    my $pid = open $output, q{-|}, 'whoami'
      or
      $plugin->nagios_exit( UNKNOWN, "Cannot determine the user: $OS_ERROR" );
    while (<$output>) {
        chomp;
        return $_;
    }
    $plugin->nagios_exit( UNKNOWN, 'Cannot determine the user' );
    return;
}

##############################################################################
# Usage     : print_verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub print_verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'print_verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        print $message;
    }

    return;

}

##############################################################################
# Usage     : %data = read_timer($file)
# Purpose   : reads the performance data from the given file
# Returns   : hash table with the performance data
# Arguments : $file : file containing the performance data
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub read_stats {

    my $file = shift;
    my %result;
    my $IN;

    print_verbose "reading $file\n";

    open $IN, q{<}, $file
      or $plugin->nagios_exit( UNKNOWN, "Cannot open $file" );

    while (<$IN>) {

        # /proc/stat file format
        #
        # cpu   user nice system idle iowait irq softirq
        # cpu n user nice system idle iowait irq softirq
        # intr  total irq0 irq1 ...
        # ctxt  context_switches
        # btime boot_time
        # processes  number_of_created_processes_and_threads
        # procs_running  running_processes
        # procs_blocked  blocked_processes

        chomp;
        if (/^cpu\ /mx) {
            s/^cpu\ //mx;
            (
                $result{cpu_user}, $result{cpu_nice},   $result{cpu_system},
                $result{cpu_idle}, $result{cpu_iowait}, $result{cpu_irq},
                $result{cpu_softirq}
            ) = split;

            $result{cpu} =
              $result{cpu_user} +
              $result{cpu_nice} +
              $result{cpu_system} +
              $result{cpu_idle} +
              $result{cpu_iowait} +
              $result{cpu_irq} +
              $result{cpu_softirq};

        }
        elsif (/^intr /mx) {
            s/^intr\ //mx;
            ( $result{irq} ) = split;
        }
        elsif (/^ctxt /mx) {
            s/^ctxt\ //mx;
            $result{ctxt} = $_;
        }
        elsif (/^processes /mx) {
            s/^processes\ //mx;
            $result{new_procs} = $_;
        }
        elsif (/^procs_running /mx) {
            s/^procs_running\ //mx;
            $result{running} = $_;
        }
        elsif (/^procs_blocked /mx) {
            s/^procs_blocked\ //mx;
            $result{blocked} = $_;
        }
        elsif (/^time /mx) {
            s/^time\ //mx;
            ( $result{time} ) = split;
        }

    }

    close $IN
      or $plugin->nagios_exit( UNKNOWN, "Cannot close $file: $OS_ERROR" );

    return %result;

}

##############################################################################
# main
#

################
# Initialization
$tmp       = '/tmp/check_cpu_status-' . get_proc_owner();
$plugin    = Nagios::Plugin->new( shortname => 'CHECK_CPU' );
$verbosity = 0;

########################
# Command line arguments

$result = GetOptions(
    'critical=i' => \$critical,
    'help|?|h'   => \$help,
    'silent'     => \$silent,
    'warning=i'  => \$warning,
    'verbose|v+' => \$verbosity,
    'version'    => sub { print "check_cpu version $VERSION\n"; exit 3; }
);

###############
# Sanity checks

if ( !$result || $help ) {
    pod2usage();
}

if ( !$silent ) {
    if ( !defined $critical || $critical <= 0 ) {
        pod2usage( -message => 'Could not parse "critical"' );
    }
    if ( !defined $warning || $warning <= 0 ) {
        pod2usage( -message => 'Could not parse "warning"' );
    }
    if ( $critical < $warning ) {
        pod2usage( -message => '"critical" has to be greater than "warning"' );
    }
}

$threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning  => $warning,
    critical => $critical,
);

########################
# Check the proc entry

if ( !-f $tmp ) {
    print_verbose "temporary file ($tmp) not available resetting and waiting\n";
    write_timer_to_file($tmp);
    sleep 1;    # wait at least one second to gather some data
}

%old = read_stats($tmp);

%new = read_stats('/proc/stat');

$diff = time - $old{time};

if ( $diff < 1 ) {

    # wait a little bit
    sleep 1;
    %old = read_stats($tmp);
}

write_timer_to_file($tmp);

# cpu = (new - old)(tot_new - tot_old)
$cpu = sprintf '%.0f',
  ( 1 - ( $new{cpu_idle} - $old{cpu_idle} ) / ( $new{cpu} - $old{cpu} ) ) * 100;
$nice = sprintf '%.0f',
  ( ( $new{cpu_nice} - $old{cpu_nice} ) / ( $new{cpu} - $old{cpu} ) ) * 100;
$system = sprintf '%.0f',
  ( ( $new{cpu_system} - $old{cpu_system} ) / ( $new{cpu} - $old{cpu} ) ) * 100;
$user = sprintf '%.0f',
  ( ( $new{cpu_user} - $old{cpu_user} ) / ( $new{cpu} - $old{cpu} ) ) * 100;
$irq       = abs int( ( $new{irq} - $old{irq} ) / $diff );
$ctxt      = abs int( ( $new{ctxt} - $old{ctxt} ) / $diff );
$new_procs = abs int( ( $new{new_procs} - $old{new_procs} ) / $diff );
$running = $new{running};
$blocked = $new{blocked};

$plugin->add_perfdata(
    label     => 'CPU',
    value     => $cpu,
    uom       => q{%},
    threshold => $threshold,
);

$plugin->add_perfdata(
    label => 'NICE',
    value => $nice,
    uom   => q{%},
);

$plugin->add_perfdata(
    label => 'SYS',
    value => $system,
    uom   => q{%},
);

$plugin->add_perfdata(
    label => 'USER',
    value => $user,
    uom   => q{%},
);

$plugin->add_perfdata(
    label => 'IRQ',
    value => $irq,
);

$plugin->add_perfdata(
    label => 'CTXT',
    value => $ctxt,
);

$plugin->add_perfdata(
    label => 'NEW_PROCS',
    value => $new_procs,
);

$plugin->add_perfdata(
    label => 'RUNNING',
    value => $running,
);

$plugin->add_perfdata(
    label => 'BLOCKED',
    value => $blocked,
);

if ( !$silent ) {
    $plugin->nagios_exit( $threshold->get_status($cpu), "CPU $cpu%" );
}
else {
    $plugin->nagios_exit( OK, "CPU $cpu%" );
}

1;
