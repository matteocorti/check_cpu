#!/usr/bin/perl

use strict;
use Getopt::Long;
use File::Copy;

my $VERSION    = "0.9";

my $tmp        = '/tmp/check_cpu_status';
my $name       = "CPU";

my $critical;
my $help       = '';
my $reset      = '';
my $result;
my $silent;
my $status     = 0;
my $status_msg = '';
my $warning;

##############################################################################
# subroutines

################################
# prints the usage of the plugin
sub usage {
  my $msg = shift;

  if (defined $msg) {
    print "$msg\n";
  }

  print << "EOT";
usage:
  -c crit, --critical=crit      critical
  -r, --reset                   reset the counter
  -s, --silent                  do not issue warnings
  -w warn, --warning warn       warning
  -v, --version                 version
EOT
  exit(3);
}

#################################################
# prints an "unknown" error message (exit code 3)
sub unknown {

  my $msg = shift;

  if (defined $msg) {
    print "$name UNKNOWN: $msg\n";
  }

  exit(3);

}

#################################################
# writes the time and transmit data to
# the temporary file
sub write_timer {

    # copy the stats
    copy('/proc/stat', $tmp) or unknown("Cannot copy /proc/stat to $tmp");

    # add the time
    open(TMP, ">> $tmp") or
        unknown("Cannot initialize timer");
    print TMP "time " . time."\n";
    close TMP or
        unknown("Cannot close timer");

}

#################################################
# reads stats
sub read_stats {

    my $file = shift;
    my %result;
    
    open(IN, $file) or
    unknown("Cannot open $file");

    while(<IN>) {
        
        # /proc/stat file format
        #
        # cpu   user nice system idle iowait irq softirq
        # cpu n user nice system idle iowait irq softirq
        # intr  total irq0 irq1 ...
        # ctxt  context_switches
        # btime boot_time
        # processes  number_of_created_processes_and_threads
        # procs_running  running_processes
        # procs_blocked  blocked_processes
        
        chomp;
        if (/^cpu\ /) {
            s/^cpu\ //;
            (
                $result{cpu_user},
                $result{cpu_nice},
                $result{cpu_system},
                $result{cpu_idle},
                $result{cpu_iowait},
                $result{cpu_irq},
                $result{cpu_softirq}
            ) = split;

            $result{cpu} =
                $result{cpu_user}    + 
                $result{cpu_nice}    +
                $result{cpu_system}  +
                $result{cpu_idle}    +
                $result{cpu_iowait}  +
                $result{cpu_irq}     +
                $result{cpu_softirq};
            
        } elsif (/^intr /) {
            s/^intr\ //;
            ($result{irq}) = split;
        } elsif (/^ctxt /) {
            s/^ctxt\ //;
            $result{ctxt}  = $_;
        } elsif (/^processes /) {
            s/^processes\ //;
            $result{new_procs}  = $_;
        } elsif (/^procs_running /) {
            s/^procs_running\ //;
            $result{running}  = $_;
        } elsif (/^procs_blocked /) {
            s/^procs_blocked\ //;
            $result{blocked}  = $_;
        } elsif (/^time /) {
            s/^time\ //;
            ($result{time}) = split;
        }
        
    }
    
    close(IN);
    
    return %result;

}

##############################################################################
# main
#

########################
# Command line arguments

$result = GetOptions (
    "critical=i"  => \$critical,
    "help"        => \$help,
    "reset"       => \$reset,
    "silent"      => \$silent,
    "warning=i"   => \$warning,
    "version"     => sub { print "check_cpu version $VERSION\n"; exit 3;}
);

if (!$result) {
  usage();
}


if ($help)                { usage(); }
if (!$silent) {
    if ($critical <= 0)       { usage("Could not parse \"critical\"");  }
    if ($warning  <= 0)       { usage("Could not parse \"warning\"");   }
    if ($critical < $warning) { usage("\"critical\" has to be greater than \"warning\""); }
}


########################
# Check the proc entry

my $diff;
my $found  = 0;
my $time;

my %new = read_stats('/proc/stat');

# get the time difference
if ($reset || !open(TMP, $tmp)) {
  write_timer;
  unknown("Initializing timer");
}

close(TMP);

my %old = read_stats($tmp);

write_timer();

$diff = time - $old{time};

if ($diff == 0) {
    unknown("check time < 1s");
}

# cpu = (new - old)(tot_new - tot_old)
my $cpu       = sprintf("%.0f",(1-($new{cpu_idle} - $old{cpu_idle})  /($new{cpu}-$old{cpu}))*100);
my $nice      = sprintf("%.0f",(($new{cpu_nice}   - $old{cpu_nice})  /($new{cpu}-$old{cpu}))*100);
my $system    = sprintf("%.0f",(($new{cpu_system} - $old{cpu_system})/($new{cpu}-$old{cpu}))*100);
my $user      = sprintf("%.0f",(($new{cpu_user}   - $old{cpu_user})  /($new{cpu}-$old{cpu}))*100);
my $irq       = abs(int(($new{irq}       - $old{irq})/      $diff));
my $ctxt      = abs(int(($new{ctxt}      - $old{ctxt})/     $diff));
my $new_procs = abs(int(($new{new_procs} - $old{new_procs})/$diff));
my $running   = $new{running};
my $blocked   = $new{blocked};

my $performance = "CPU=$cpu;$warning;$critical;;"
    ." NICE=$nice;;;;"
    ." SYS=$system;;;;"
    ." USER=$user;;;;"
    ." IRQ=$irq;;;;"
    ." CTXT=$ctxt;;;;"
    ." NEW_PROCS=$new_procs;;;;"
    ." RUNNING=$running;;;;"
    ." BLOCKED=$blocked;;;;";

if (!$silent) {
    if ($cpu < $warning) {
        print "$name OK $cpu%|$performance\n";
        exit 0;
    } else {
        if ($cpu < $critical) {
            print "$name WARNING $cpu%|$performance\n";
            exit 1;
        } else {
            print "$name CRITICAL $cpu%|$performance\n";
            exit 2;
        }
    }
} else {
    print "$name $cpu%|$performance\n";
    exit 0;
}

warning("Implementation error");
